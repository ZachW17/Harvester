
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;

namespace Harvester
{
    public class LevelTwo : Level
    {
        Engine gameEngine;

        #region Constructor
        /// <summary>
        /// Constructs the LevelOne object
        /// </summary>
        /// <param name="theGame">the game engine</param>
        /// <param name="spriteBatch">the spritebatch for drawing</param>
        public LevelTwo(Engine theGame, SpriteBatch spriteBatch, int score)
            : base(theGame, spriteBatch)
        {
            // No other code neededd
            this.score = score;
            gameEngine = theGame;
            CurrentEnemies = 0;
            MaxEnemies = 100;
        }
        #endregion

        #region Methods
        /// <summary>
        /// Initializes the LevelOne object
        /// </summary>
        public override void Initialize()
        {
            base.Initialize();
            //no extra code needed
        }

        /// <summary>
        /// Load all level specific textures, fonts and objects here
        /// </summary>
        protected override void LoadContent()
        {
            //create Background objects and add to background array
            backgrounds[0] = new Background(new Rectangle(0, 0, GraphicsDevice.Viewport.Width, GraphicsDevice.Viewport.Height), AssetManager.Instance.FindTexture("water_world1"));
            backgrounds[1] = new Background(new Rectangle(0, -GraphicsDevice.Viewport.Height, GraphicsDevice.Viewport.Width, GraphicsDevice.Viewport.Height), AssetManager.Instance.FindTexture("water_world2"));
            backgrounds[2] = new Background(new Rectangle(0, -GraphicsDevice.Viewport.Height * 2, GraphicsDevice.Viewport.Width, GraphicsDevice.Viewport.Height), AssetManager.Instance.FindTexture("water_world3"));
            backgrounds[3] = new Background(new Rectangle(0, -GraphicsDevice.Viewport.Height * 3, GraphicsDevice.Viewport.Width, GraphicsDevice.Viewport.Height), AssetManager.Instance.FindTexture("water_world4"));

            base.LoadContent();
        }

        /// <summary>
        /// Updates all the objects used by LevelOne
        /// </summary>
        /// <param name="gameTime">the gametime</param>
        public override void Update(GameTime gameTime)
        {
            base.Update(gameTime);//updates the background, ships, and HUD

            //get input to fire bullets
            MouseState mouseState = Mouse.GetState();
            if (mouseState.LeftButton == ButtonState.Pressed)
            {
                player.Fire();
            }

            KeyboardState kbState = Keyboard.GetState();
            if (kbState.IsKeyDown(Keys.Escape))
            {
                gameEngine.CurrentState = Gamestate.GamePause;
            }

            //update bullet pos
            player.UpdatePlayerBullets();

            // Ends the game if the player dies
            if (player.CurrentHealth <= 0)
            {
                gameEngine.CurrentPlayer = player;
                gameEngine.CurrentState = Gamestate.GameOver;
            }

        }

        /// <summary>
        /// Draws the level
        /// </summary>
        /// <param name="gameTime">the gametime</param>
        /// <param name="spriteBatch">the spritebatch for drawing</param>
        public override void Draw(GameTime gameTime, SpriteBatch spriteBatch)
        {
            base.Draw(gameTime, spriteBatch);//draws the background, ships, and HUD
        }
        #endregion
    }
}
