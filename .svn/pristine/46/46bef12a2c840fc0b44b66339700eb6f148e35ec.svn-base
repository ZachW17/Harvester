/*
 * public abstract class Player : Ship
 * @author Freddy Garcia/Peter O'Neal
 * 
 * Version:
 *      $1.1.3$
 * 
 * Revisions:
 *      1.1.0: (Not sure?)
 *          - Added a ProcessInput method
 *      1.1.3: (Freddy Garcia)
 *          - Changed the cooldown timer to a double
 *          - Changed the UpdatePlayerBullets to check for bullets going out through the left and right sides of the screen
 * 
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;

namespace Harvester
{
    /// <summary>
    /// The ship that will be controllable by the player in the game
    /// </summary>
    public class PlayerShip :  Ship
    {
        #region Attributes
        private int fireRate; //the speed that the main gun can be fired (shots/60frames)
        private int fireCounter; //used to determine when the ship can fire
        private Harvester harvester; //the ship's Harvester weapon
        private Vector2 bulletDirection; // direction in which the bullet should move torwards
        #endregion

        #region Properties
        /// <summary>
        /// Fire rate of the gun
        /// </summary>
        public int FireRate
        {
            get { return fireRate; }
            set { fireRate = value; }
        }

        /// <summary>
        /// The direction in which the bullet should move torwards
        /// </summary>
        public Vector2 BulletDirection
        {
            get { return bulletDirection; }
            set { bulletDirection = value; }
        }

        /// <summary>
        /// The x-direction in which the bullet should move
        /// </summary>
        public float BulletXDirection
        {
            get { return bulletDirection.X; }
        }

        /// <summary>
        /// The y-direction in which the bullet should move
        /// </summary>
        public float BulletYDirection
        {
            get { return bulletDirection.Y; }
        }

        public Harvester Harvester { get { return harvester; } set { harvester = value; } }


        #endregion

        /// <summary>
        /// Creates a new player which will have position/size,
        /// texture, speed, health, and armor determined by parameters.
        /// </summary>
        /// <param name="objPos">The position/size of the player</param>
        /// <param name="objTexture">The texture of the player</param>
        /// <param name="objSpeed">The speed of the player</param>
        /// <param name="objHealth">The health of the player</param>
        /// <param name="objArmor">The armor of the player</param>
        public PlayerShip(Rectangle objPos, Texture2D objTexture, double objSpeed, double objHealth, double objArmor, Texture2D bulletTexture, ShipType shipType, Harvester h)
            : base(objPos, objTexture, objSpeed, objHealth, objArmor,bulletTexture, shipType)
        {
            //set defaults for variables
            fireRate = 30;
            fireCounter = 0;
            harvester = h;

            //set default bullet texture
            pBulletTexture = bulletTexture;
            //create internal list of bullets
            this.Bullets = new List<PlayerBullet>();
        }

        public override void Draw(SpriteBatch spriteBatch)
        {
            //draw the harvester
            harvester.DrawClaw(spriteBatch, this);

            base.Draw(spriteBatch);
        }

        /// <summary>
        /// Fires the main weapon of the player
        /// </summary>
        public override void Fire()
        {
            //increment fireCounter
            fireCounter++;

            //check how much time has passed and compare to fire rate
            if (fireCounter == fireRate)
            {
                //create two bullets and add to list
                PlayerBullet pBullet = new PlayerBullet(new Rectangle((int) this.ObjectXPos+5, (int) this.ObjectYPos, 10, 20), pBulletTexture, 5, 10);
                PlayerBullet pBullet2 = new PlayerBullet(new Rectangle((int) this.ObjectXPos+35, (int) this.ObjectYPos, 10, 20), pBulletTexture, 5, 10);
                this.Bullets.Add(pBullet);
                this.Bullets.Add(pBullet2);


                //reset fireCounter
                fireCounter = 0;
            }
        }

        /// <summary>
        /// Fires the harvester
        /// </summary>
        public void Harvest()
        {
            harvester.IsActive = true;
        }

        /// <summary>
        /// Sorts through and updates the player's array of bullets
        /// </summary>
        /// <param name="currentMousePosition">The current position of the mouse</param>
        public void UpdatePlayerBullets(Vector2 currentMousePosition, GameTime gametime)
        {
            //sort through list and move bullets
            for (int i = 0; i < this.Bullets.Count; i++)
            {
                //get bullet direction
                BulletDirection = currentMousePosition - new Vector2(Bullets[i].ObjectXPos, Bullets[i].ObjectYPos);

                // If safe, normalize the direction
                if (BulletDirection != Vector2.Zero)
                    BulletDirection.Normalize();

                // move bullet
                Bullets[i].ObjectXPos += BulletDirection.X * (float) Bullets[i].Speed * (float) gametime.ElapsedGameTime.TotalSeconds;
                Bullets[i].ObjectYPos += BulletDirection.Y * (float) Bullets[i].Speed * (float) gametime.ElapsedGameTime.TotalSeconds;

                //remove bullets if they go off the screen
                if (Bullets[i].ObjectYPos < 0 || Bullets[i].ObjectXPos < 0 
                    || Bullets[i].ObjectYPos == currentMousePosition.Y || Bullets[i].ObjectXPos == currentMousePosition.X)
                    Bullets.Remove(Bullets[i]);
               
            }
        }
    }
}
