/*
 * public abstract class Player : Ship
 * @author Freddy Garcia/Peter O'Neal
 * 
 * Version:
 *      $1.1.3$
 * 
 * Revisions:
 *      1.1.0: (Not sure?)
 *          - Added a ProcessInput method
 *      1.1.3: (Freddy Garcia)
 *          - Changed the cooldown timer to a double
 *          - Changed the UpdatePlayerBullets to check for bullets going out through the left and right sides of the screen
 * 
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;

namespace Harvester
{
    /// <summary>
    /// The ship that will be controllable by the player in the game
    /// </summary>
    public class PlayerShip :  Ship
    {
        #region Attributes
        private int fireRate; //the speed that the main gun can be fired (shots/60frames)
        private int fireCounter; //used to determine when the ship can fire
        private double cooldownTime; //the time that it takes for the Harvester to cool down after being used
        private Harvester claw; //the ship's Harvester weapon
        #endregion

        #region Properties
        /// <summary>
        /// Fire rate of the gun
        /// </summary>
        public int FireRate
        {
            get { return fireRate; }
            set { fireRate = value; }
        }

        /// <summary>
        /// Cooldown timer of the harvest ability
        /// </summary>
        public double CooldownTime
        {
            get { return cooldownTime; }
            set { cooldownTime = value; }
        }

        #endregion

        /// <summary>
        /// Creates a new player which will have position/size,
        /// texture, speed, health, and armor determined by parameters.
        /// </summary>
        /// <param name="objPos">The position/size of the player</param>
        /// <param name="objTexture">The texture of the player</param>
        /// <param name="objSpeed">The speed of the player</param>
        /// <param name="objHealth">The health of the player</param>
        /// <param name="objArmor">The armor of the player</param>
        public PlayerShip(Rectangle objPos, Texture2D objTexture, double objSpeed, double objHealth, double objArmor, Texture2D bulletTexture, ShipType shipType)
            : base(objPos, objTexture, objSpeed, objHealth, objArmor,bulletTexture, shipType)
        {
            //set defaults for variables
            fireRate = 15;
            fireCounter = 0;
            cooldownTime = 1200.0;
            claw = new Harvester();


            //set default bullet texture
            pBulletTexture = bulletTexture;
            //create internal list of bullets
            this.Bullets = new List<PlayerBullet>();
        }

        /// <summary>
        /// Fires the main weapon of the player
        /// </summary>
        public override void Fire()
        {
            //increment fireCounter
            fireCounter++;

            //check how much time has passed and compare to fire rate
            if (fireCounter == fireRate)
            {
                //create two bullets and add to list
                PlayerBullet pBullet = new PlayerBullet(new Rectangle(this.ObjectXPos+5, this.ObjectYPos, 10, 20), pBulletTexture, 10, 10);
                PlayerBullet pBullet2 = new PlayerBullet(new Rectangle(this.ObjectXPos+35, this.ObjectYPos, 10, 20), pBulletTexture, 10, 10);
                this.Bullets.Add(pBullet);
                this.Bullets.Add(pBullet2);


                //reset fireCounter
                fireCounter = 0;
            }
        }

        /// <summary>
        /// Sorts through and updates the player's array of bullets
        /// </summary>
        public void UpdatePlayerBullets()
        {
            //sort through list and move bullets
            for (int i = 0; i < this.Bullets.Count; i++)
            {
                //move bullet
                Bullets[i].ObjectYPos -= (int) Bullets[i].Speed;

                //remove bullets if they go off the screen
                if (Bullets[i].ObjectYPos < 0 || Bullets[i].ObjectXPos < 0)
                //|| (Bullets[i].ObjectXPos + Bullets[i].ObjectWidth) > )
                    Bullets.Remove(Bullets[i]);
            }
        }
    }
}
