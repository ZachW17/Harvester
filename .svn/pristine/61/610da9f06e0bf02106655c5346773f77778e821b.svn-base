/*
 * public class GamePause
 * @author Zach Whitman
 * 
 * Version:
 *      $1.0.0$
 * 
 * Revisions:
 * 
 * 
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;

namespace Harvester
{
    /// <summary>
    /// Menu that will be displayed when the player has lost the game
    /// (I just lost the game >.>)
    /// </summary>
    class GameOver : Menu
    {
        // Main text and img that will be displayed during the pause screen
        Player currentPlayer;
        private Texture2D gameOverTexture;
        private Texture2D playAgainTexture;
        private Button playAgainButton;
        private Button gameOverButton;
        private Vector2 scoreVector;
        private SpriteFont scoreFont;
        private string scoreText;

        // Properties of the attributes
        #region properties
        public string ScoreText
        {
            get { return scoreText; }
            set { scoreText = value; }
        }
        public Vector2 ScoreVector
        {
            get { return scoreVector; }
            set { scoreVector = value; }
        }
        public SpriteFont ScoreFont
        {
            get { return scoreFont; }
            set { scoreFont = value; }
        }
        public Texture2D GameOverTexture
        {
            get { return gameOverTexture; }
            set { gameOverTexture = value; }
        }
        public Texture2D PlayAgainTexture
        {
            get { return playAgainTexture; }
            set { playAgainTexture = value; }
        }
        public Button PlayAgainButton
        {
            get { return playAgainButton; }
            set { playAgainButton = value; }
        }
        public Button GameOverButton
        {
            get { return gameOverButton; }
            set { gameOverButton = value; }
        }
        #endregion


        /// <summary>
        /// The pause menu is created and the screen is displayed.
        /// </summary>
        /// <param name="currentPlayer"></param>
        public GameOver(Engine theGame, Player currentPlayer, int score)
            : base(theGame)
        {
            this.currentPlayer = currentPlayer;
            Game.IsMouseVisible = true;
            scoreText = "Score: " + score.ToString();
            Initialize();
            LoadContent();

        }

        /// <summary>
        /// Allows the game to perform any initialization it needs to before starting to run.
        /// This is where it can query for any required services and load any non-graphic
        /// related content.  Calling base.Initialize will enumerate through any components
        /// and initialize them as well.
        /// </summary>
        public override void Initialize()
        {
            base.Initialize();
            scoreVector = new Vector2(25, 25);
        }

        /// <summary>
        /// LoadContent will be called once per game and is the place to load
        /// all of your content.
        /// </summary>
        protected override void LoadContent()
        {
            playAgainTexture = Game.Content.Load<Texture2D>(@"Menu Assets\Play Again Icon");
            gameOverTexture = Game.Content.Load<Texture2D>(@"Menu Assets\Quit Icon");
            playAgainButton = new Button(new Rectangle(440, 272, 400, 400), playAgainTexture);
            gameOverButton = new Button(new Rectangle(230, 372, 400, 400), gameOverTexture);
            scoreFont = Game.Content.Load<SpriteFont>(@"Fonts\GameOverScore");
        }

        /// <summary>
        /// Allows the game to run logic such as updating the world,
        /// checking for collisions, gathering input, and playing audio.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        public override void Update(GameTime gameTime)
        {
            currentMouseState = Mouse.GetState();
            if (currentMouseState.LeftButton == ButtonState.Pressed && previousMouseState.LeftButton == ButtonState.Released)
            {

            }

            if (playAgainButton.ObjectPosition.Contains(new Point(currentMouseState.X, currentMouseState.Y)))
            {
                if (currentMouseState.LeftButton == ButtonState.Pressed && previousMouseState.LeftButton == ButtonState.Released)
                {
                    gameEngine.CurrentState = Gamestate.MainMenu;
                }
                
            }

            previousMouseState = Mouse.GetState();
        }

        /// <summary>
        /// This is called when the game should draw itself.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        public override void Draw(GameTime gameTime, SpriteBatch spriteBatch)
        {
            playAgainButton.Draw(spriteBatch);
            gameOverButton.Draw(spriteBatch);
            spriteBatch.DrawString(scoreFont, scoreText, scoreVector, Color.Black);
        }
    }
}
