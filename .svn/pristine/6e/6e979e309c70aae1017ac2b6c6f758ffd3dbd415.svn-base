/*
 * public class MainMenu
 * @author Zachary Whitman/Derrick Hunt
 * 
 * Version:
 *      $1.5.0MOARBada$$
 * 
 * Revisions:
 *  Added a rectangle instead of a vector for the menu buttons
 *  Added the abstract methods from the menu class
 *  Have it if you click start, something should happen
 *  
 * 1) Made the menu not look like crap lol (added main buttons and background
 * and whatnot)
 *      -Derrick
 * 2) Cleaned up code with abstraction
 *      -Derrick
 * 3) Animated the menu, custom new graphics. A+++ material here
 *      Derrick
 * 
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;

namespace Harvester
{
    /// <summary>
    /// The main menu that will be displayed when the player has loaded the game
    /// </summary>
    public class MainMenu : Menu
    {
        #region Attributes
        //texture graphics for the main menu
        private Texture2D logoTexture;
        private Texture2D playButtonTexture;
        private Texture2D optionsButtonTexture;
        private Texture2D manualButtonTexture;
        private Texture2D backgroundTexture;
        //texture graphics for the options menu
        private Vector2 optionsBackgroundPos;
        private Texture2D optionsBackgroundTexture;
        private Texture2D optionsBackButtonTexture;
        //texture graphics for the manual menu
        private Vector2 manualBackgroundPos;
        private Texture2D manualBackgroundTexture;
        private Texture2D manualBackButtonTexture;
        //random moving boxes for overall background
        private Texture2D backgroundBoxTexture;
        private List<BackgroundBox> backgroundBoxs;
        //buttons for the main menu
        private Button playButton;
        private Button optionsButton;
        private Button manualButton;
        //buttons for the options menu
        private Button optionsBackButton;
        //buttons for the manual menu
        private Button manualBackButton;

        //main menu state
        private enum MainMenuState
        {
            MainMenu,
            OptionsMenu,
            ManualMenu
        }
        private MainMenuState currentState;
        private MainMenuState prevState;
        private int menuCounter; //used to animate the menu
        #endregion

        /// <summary>
        /// Creates the main menu
        /// </summary>
        public MainMenu(Engine theGame)
            : base(theGame)
        {
            //create list of background boxes
            backgroundBoxs = new List<BackgroundBox>();
            //set initial state to main menu
            currentState = MainMenuState.MainMenu;
        }

        /// <summary>
        /// Initializes the Main Menu
        /// </summary>
        public override void Initialize()
        {
            base.Initialize();

            //set value of the menuCounter
            menuCounter = GraphicsDevice.Viewport.Width;
        }

        /// <summary>
        /// Loads the content of the main menu
        /// </summary>
        protected override void LoadContent()
        {
            //load in all textures
            //main menu textures
            logoTexture = Game.Content.Load<Texture2D>(@"Menu Assets\Main Menu - Logo");
            playButtonTexture = Game.Content.Load<Texture2D>(@"Menu Assets\Main Menu - Play Button Texture");
            optionsButtonTexture = Game.Content.Load<Texture2D>(@"Menu Assets\Main Menu - Options Button Texture");
            manualButtonTexture = Game.Content.Load<Texture2D>(@"Menu Assets\Main Menu - Manual Button Texture");
            backgroundBoxTexture = Game.Content.Load<Texture2D>(@"Menu Assets\Main Menu - Box");
            backgroundTexture = Game.Content.Load<Texture2D>(@"Menu Assets\Main Menu - Background");
            //options menu textures
            optionsBackgroundTexture = Game.Content.Load<Texture2D>(@"Menu Assets\Options Menu - Background");
            optionsBackButtonTexture = Game.Content.Load<Texture2D>(@"Menu Assets\Main Menu - Back Button Left");
            //manual menu textures
            manualBackgroundTexture = Game.Content.Load<Texture2D>(@"Menu Assets\Manual Menu - Background");
            manualBackButtonTexture = Game.Content.Load<Texture2D>(@"Menu Assets\Main Menu - Back Button Right");

            //create all buttons
            //main menu buttons
            playButton = new Button(new Rectangle( 440, 272, 400, 400), playButtonTexture);
            optionsButton = new Button(new Rectangle(850, 372, 200, 200), optionsButtonTexture);
            manualButton = new Button(new Rectangle(230, 372, 200, 200), manualButtonTexture);
            //options menu buttons
            optionsBackgroundPos = new Vector2(1295, 225);
            optionsBackButton = new Button(new Rectangle(1295, 612, 200, 100), optionsBackButtonTexture);
            //manual menu buttons
            manualBackgroundPos = new Vector2(-1265, 225);
            manualBackButton = new Button(new Rectangle(-215, 612, 200, 100), manualBackButtonTexture);

            //randomly generate background boxes with random color and size
            Random gen = new Random();
            for (int i = 0; i < 600; i++)
            {
                int r = gen.Next(256);
                int g = gen.Next(256);
                int b = gen.Next(256);
                int a = gen.Next(256);
                Color color = new Color(r, g, b, a);
                int size = gen.Next(5) + 5;
                BackgroundBox temp = (new BackgroundBox(new Rectangle(gen.Next(1280*3)-1270, gen.Next(720*3) - 710,
                    size, size), backgroundBoxTexture, size, color));
                backgroundBoxs.Add(temp);
            }

        }

        /// <summary>
        /// Updates the game every frame per second thing
        /// Checks to see if the mouse was clicked
        /// </summary>
        /// <param name="gameTime"></param>
        public override void Update(GameTime gameTime)
        {
            //get the mouse state
            currentMouseState = Mouse.GetState();

            //check which buttons are clicked
            if ((currentMouseState.LeftButton == ButtonState.Pressed && previousMouseState.LeftButton == ButtonState.Released) &&
                menuCounter == GraphicsDevice.Viewport.Width)//can only check for click if menu isn't animating
            {
                //play button (change gamestate to the game)
                if (playButton.ObjectPosition.Contains(new Point(currentMouseState.X,currentMouseState.Y)))
                   gameEngine.CurrentState = Engine.Gamestate.Gameplay;

                //options button (shift menu to the right)
                if (optionsButton.ObjectPosition.Contains(new Point(currentMouseState.X, currentMouseState.Y)))
                {
                    currentState = MainMenuState.OptionsMenu;
                    menuCounter = 0;
                }
                //options back button (shift menu back to main)
                if (optionsBackButton.ObjectPosition.Contains(new Point(currentMouseState.X, currentMouseState.Y)))
                {
                    currentState = MainMenuState.MainMenu;
                    prevState = MainMenuState.OptionsMenu;
                    menuCounter = 0;
                }

                //manual button (shift menu to the left)
                if (manualButton.ObjectPosition.Contains(new Point(currentMouseState.X, currentMouseState.Y)))
                {
                    currentState = MainMenuState.ManualMenu;
                    menuCounter = 0;
                }
                //manual back button (shift menu back to main)
                if (manualBackButton.ObjectPosition.Contains(new Point(currentMouseState.X, currentMouseState.Y)))
                {
                    currentState = MainMenuState.MainMenu;
                    prevState = MainMenuState.ManualMenu;
                    menuCounter = 0;
                }
            }
            //get prev mouse state
            previousMouseState = Mouse.GetState();

            //animate the menu if the menuCounter has been reset
            if (menuCounter < GraphicsDevice.Viewport.Width)
            {
                switch (currentState)
                {
                    case MainMenuState.MainMenu:
                        if (prevState == MainMenuState.OptionsMenu)
                        {
                            ShiftMenu(4);
                        }
                        else if (prevState == MainMenuState.ManualMenu)
                        {
                            ShiftMenu(-4);
                        }
                        menuCounter += 4;
                        break;
                    case MainMenuState.OptionsMenu:
                        ShiftMenu(-4);
                        menuCounter += 4;
                        break;
                    case MainMenuState.ManualMenu:
                        ShiftMenu(4);
                        menuCounter += 4;
                        break;
                }
            }

            //update background rectangles
            Random gen = new Random();
            for (int i = 0; i < backgroundBoxs.Count; i++)
            {
                int direction = gen.Next(16);
                if (direction == 0)
                    backgroundBoxs[i].ObjectXPos += (int)backgroundBoxs[i].Speed;
                if (direction == 1)
                    backgroundBoxs[i].ObjectXPos -= (int)backgroundBoxs[i].Speed;
                if (direction == 2)
                    backgroundBoxs[i].ObjectYPos += (int)backgroundBoxs[i].Speed;
                if (direction == 3)
                    backgroundBoxs[i].ObjectYPos -= (int)backgroundBoxs[i].Speed;
            }
        }


        /// <summary>
        /// Draws the menu's images, the start button and later on the background image
        /// </summary>
        /// <param name="gameTime">The gameTime of the game</param>
        /// <param name="spriteBatch">The spritebatch from the engine and its graphics device</param>
        public override void Draw(GameTime gameTime, SpriteBatch spriteBatch)
        {
            //draw the background texture and background boxes
            spriteBatch.Draw(backgroundTexture, new Vector2(0, 0), Color.White);
            for (int i = 0; i < backgroundBoxs.Count; i++)
            {
                backgroundBoxs[i].Draw(spriteBatch);
            }
            //draw the logo
            spriteBatch.Draw(logoTexture, new Vector2(0, 50), Color.White);

            //draw buttons
            playButton.Draw(spriteBatch);
            manualButton.Draw(spriteBatch);
            optionsButton.Draw(spriteBatch);
            manualBackButton.Draw(spriteBatch);
            optionsBackButton.Draw(spriteBatch);

            //draw menus
            spriteBatch.Draw(optionsBackgroundTexture, optionsBackgroundPos, Color.White);
            spriteBatch.Draw(manualBackgroundTexture, manualBackgroundPos, Color.White);
        }

        /// <summary>
        /// Shifts the menu screen towards a direction
        /// specified by the parameter.
        /// </summary>
        /// <param name="direction">The direction towards where the screen shifts</param>
        private void ShiftMenu(int direction)
        {
            //shift all menu elements a certain direction
            //buttons, backgrounds, and boxes
            //boxes
            for (int i = 0; i < backgroundBoxs.Count; i++)
            {
                for (int j = 0; j < Math.Abs(direction); j++)
                {
                    if (direction > 0)
                    {
                        backgroundBoxs[i].ObjectXPos++;
                    }
                    else if (direction <= 0)
                    {
                        backgroundBoxs[i].ObjectXPos--;
                    }
                }
            }
            //buttons
            playButton.ObjectXPos += direction;
            manualButton.ObjectXPos += direction;
            optionsButton.ObjectXPos += direction;
            optionsBackButton.ObjectXPos += direction;
            manualBackButton.ObjectXPos += direction;

            //background textures
            optionsBackgroundPos.X += direction;
            manualBackgroundPos.X += direction;

        }

    }
}
