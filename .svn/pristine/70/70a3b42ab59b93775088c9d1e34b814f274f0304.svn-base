/*
 * public class GamePause
 * @author Zach Whitman
 * 
 * Version:
 *      $1.0.0$
 * 
 * Revisions:
 * 
 * 
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;


namespace Harvester
{
    /// <summary>
    /// Menu that will be displayed when the player pauses the game
    /// </summary>
    public class GamePause : Menu 
    {
        // Attributes
        
        // Textures for the graphics in the pause menu
        private Texture2D pauseIconTexture;
        private Texture2D playIconTexture;
        private Texture2D quitIconTexture;
        
        // Buttons for the pause menu
        private Button pauseButton;
        private Button playButton;
        private Button quitButton;


        // Properties of the attributes


        public GamePause(Engine theGame)
            : base(theGame)
        {
            Initialize();
            LoadContent();
        }

        public override void Initialize()
        {
            base.Initialize();
        }

        protected override void LoadContent()
        {
            pauseIconTexture = Game.Content.Load<Texture2D>(@"Menu Assets\Pause Icon");
            playIconTexture = Game.Content.Load<Texture2D>(@"Menu Assets\Play Icon");
            quitIconTexture = Game.Content.Load<Texture2D>(@"Menu Assets\Quit Icon");
            pauseButton = new Button(new Rectangle(440, 272, 400, 400), pauseIconTexture);
            playButton = new Button(new Rectangle(850, 372, 400, 400), playIconTexture);
            quitButton = new Button(new Rectangle(230, 372, 400, 400), quitIconTexture);
        }

        public override void Update(GameTime gameTime)
        {
            currentMouseState = Mouse.GetState();
            if (currentMouseState.LeftButton == ButtonState.Pressed && previousMouseState.LeftButton == ButtonState.Released)
            {

            }

            if (pauseButton.ObjectPosition.Contains(new Point(currentMouseState.X, currentMouseState.Y)))
            {
                if (currentMouseState.LeftButton == ButtonState.Pressed && previousMouseState.LeftButton == ButtonState.Released)
                {
                    gameEngine.CurrentState = Gamestate.Gameplay;
                }
            }

            if (playButton.ObjectPosition.Contains(new Point(currentMouseState.X, currentMouseState.Y)))
            {
                if (currentMouseState.LeftButton == ButtonState.Pressed && previousMouseState.LeftButton == ButtonState.Released)
                {
                    gameEngine.CurrentState = Gamestate.MainMenu;
                }
            }

            if (quitButton.ObjectPosition.Contains(new Point(currentMouseState.X, currentMouseState.Y)))
            {
                if (currentMouseState.LeftButton == ButtonState.Pressed && previousMouseState.LeftButton == ButtonState.Released)
                {
                    gameEngine.CurrentState = Gamestate.Gameplay;
                }
            }
            previousMouseState = Mouse.GetState();

       }

        public override void Draw(GameTime gameTime, SpriteBatch spriteBatch)
        {
            pauseButton.Draw(spriteBatch);
            playButton.Draw(spriteBatch);
            quitButton.Draw(spriteBatch);
        }

    }
}
