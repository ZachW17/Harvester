/*
 * public abstract class Enemy : Ship
 * @author Freddy Garcia
 * 
 * Version:
 *      $1.1.1$
 * 
 * Revisions:
 *      1.1.0: (Derrick Hunt)
 *          - Added a TakeHit method for the ship to be able to take damage
 *      1.1.1: (Freddy Garcia)
 *          - Removed the bool isActive parameter from the constructor
 *      1.1.2: (Peter O'Neal)
 *          - Added properties and attributes for when enemies hit screen edges
 *      1.1.3 (Peter O'Neal)    
 *          - Did all the enemy bullet stuff
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;

namespace Harvester
{
    /// <summary>
    /// Enemies that will spawn on the ship which can shoot down the ship
    /// </summary>
    public abstract class Enemy : Ship
    {
        // the state of whether the enemy is alive or not
        protected bool isActive;
        protected bool hitRight;
        protected ShipType type;
        protected bool lockOn;
        protected Color color;
        protected double shotTimer;

        /// <summary>
        /// If the enemy is alive
        /// </summary>
        public bool IsActive
        {
            get { return isActive; }
            set { isActive = value; }
        }
        //timer for when enemies shoot
        public double ShotTimer
        {
            get { return shotTimer; }
            set { shotTimer = value; }
        }
        //lock on boolean
        public bool LockOn
        {
            get { return lockOn; }
            set { lockOn = value; }
        }
        //to change the color
        public Color Color
        {
            get { return color; }
            set { color = value; }
        }
        //sses if enemy has hit right edge of screen
        public bool HitRight
        {
            get { return hitRight; }
            set { hitRight = value; }
        }

        public ShipType Type
        {
            get { return type; }
            set { type = value; }
        }

        /// <summary>
        /// Creates a new enemy which will have position/size,
        /// texture, speed, health, and armor determined by parameters.
        /// </summary>
        /// <param name="objPos">The position/size of the enemy</param>
        /// <param name="objTexture">The texture of the enemy</param>
        /// <param name="objSpeed">The speed of the enemy</param>
        /// <param name="objHealth">The health of the enemy</param>
        /// <param name="objArmor">The armor of the enemy</param>
        public Enemy(Rectangle objPos, Texture2D objTexture, double objSpeed, double objHealth, double objArmor, Texture2D bulletTexture, ShipType shipType, int st)
            : base(objPos, objTexture, objSpeed, objHealth, objArmor,bulletTexture, shipType)
        {
            isActive = true;
            hitRight = false;
            type = shipType;
            color = Color.White;
            shotTimer = st;
            //set default bullet texture
            enemyBullet = bulletTexture;
            this.EBullets = new List<EnemyBullet>();
        }

        
        /// <summary>
        /// The ship takes damage equal to the damage in the parameter
        /// </summary>
        /// <param name="damage"></param>
        public void TakeHit(double damage)
        {
            CurrentHealth -= damage;

            // The ship dies when health is less than or equal to 0
            if (CurrentHealth <= 0)
            {
                isActive = false;
            }
        }

        //adds the enemy bullets to the list tp be later drawn
        public override void Fire()
        {
            if (this.IsActive == true)
            {
                EnemyBullet ebullet1 = new EnemyBullet(new Rectangle((int) this.ObjectXPos + 5, (int) this.ObjectYPos, 10, 20), enemyBullet, 10, 10);
                EnemyBullet ebullet2 = new EnemyBullet(new Rectangle((int) this.ObjectXPos + 35, (int) this.ObjectYPos, 10, 20), enemyBullet, 10, 10);
                this.EBullets.Add(ebullet1);
                this.EBullets.Add(ebullet2);
            }
        }

        //makes the enemy bullets move
        public void UpdateEnemyBullets()
        {
            for (int i = 0; i < this.EBullets.Count; i++)
            {
                EBullets[i].ObjectYPos += 8;
                if (EBullets[i].ObjectYPos > 1200)
                {
                    EBullets.Remove(EBullets[i]);
                }
            }
        }
    }
}
