using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;

namespace Harvester
{
    //Derrick Hunt - 4/1
        //added scrolling backgrounds
    //rev 2: cleaned up the code, added basic HUD
    //Peter O'Neal 4/5
    //rev 3: Drew ship to screen and added movement controls
    public class LevelOne : Level
    {
        //attributes
        private Texture2D explosion;

        //no properties

        #region Constructor
        /// <summary>
        /// Constructs the LevelOne object
        /// </summary>
        /// <param name="theGame">the game engine</param>
        /// <param name="spriteBatch">the spritebatch for drawing</param>
        public LevelOne(Game theGame,SpriteBatch spriteBatch)
            :base(theGame,spriteBatch)
        {
            //no extra code needed
        }
        #endregion

        #region Methods
        /// <summary>
        /// Initializes the LevelOne object
        /// </summary>
        public override void Initialize()
        {
            base.Initialize();
            //no extra code needed
        }

        /// <summary>
        /// Load all level specific textures, fonts and objects here
        /// </summary>
        protected override void LoadContent()
        {
            base.LoadContent();

            //load in background textures
            //LoadBackgrounds(background1, background2, background3, background4);
            background1 = Game.Content.Load<Texture2D>(@"Level Backgrounds\LavaWorld1");
            background2 = Game.Content.Load<Texture2D>(@"Level Backgrounds\LavaWorld2");
            background3 = Game.Content.Load<Texture2D>(@"Level Backgrounds\LavaWorld3");
            background4 = Game.Content.Load<Texture2D>(@"Level Backgrounds\LavaWorld4");

            //load explosion texture
            explosion = Game.Content.Load<Texture2D>(@"Effects\SpriteSheet - Explosion 1");

            //create Background objects and add to background array
            backgrounds[0] = new Background(new Rectangle(0, 0, GraphicsDevice.Viewport.Width, GraphicsDevice.Viewport.Height), background1);
            backgrounds[1] = new Background(new Rectangle(0, -GraphicsDevice.Viewport.Height, GraphicsDevice.Viewport.Width, GraphicsDevice.Viewport.Height), background2);
            backgrounds[2] = new Background(new Rectangle(0, -GraphicsDevice.Viewport.Height*2, GraphicsDevice.Viewport.Width, GraphicsDevice.Viewport.Height), background3);
            backgrounds[3] = new Background(new Rectangle(0, -GraphicsDevice.Viewport.Height*3, GraphicsDevice.Viewport.Width, GraphicsDevice.Viewport.Height), background4);
        }

        /// <summary>
        /// Updates all the objects used by LevelOne
        /// </summary>
        /// <param name="gameTime">the gametime</param>
        public override void Update(GameTime gameTime)
        {
            base.Update(gameTime);//updates the background, ships, and HUD

            //get input to fire bullets
            MouseState mouseState = Mouse.GetState();
            if (mouseState.LeftButton == ButtonState.Pressed)
            {
                player.Fire();
            }
            
            //update bullet pos
            player.UpdatePlayerBullets();

            //TESTING explosion
            //enemy1.Explode(gameTime, spriteBatch, new Vector2(enemy1.ObjectXPos, enemy1.ObjectYPos), explosion);
        }

        /// <summary>
        /// Draws the level
        /// </summary>
        /// <param name="gameTime">the gametime</param>
        /// <param name="spriteBatch">the spritebatch for drawing</param>
        public override void Draw(GameTime gameTime, SpriteBatch spriteBatch)
        {
            base.Draw(gameTime, spriteBatch);//draws the background, ships, and HUD


            enemy1.Explode(gameTime, spriteBatch, new Vector2(enemy1.ObjectXPos-20, enemy1.ObjectYPos-20), explosion);
        }
        #endregion


    }
}
