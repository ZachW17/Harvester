/*
 * public abstract class Level : Microsoft.Xna.Framework.DrawableGameComponent
 * @author Freddy Garcia/Peter O'Neal/Derrick Hunt
 * 
 * Version:
 *      $1.5.3$
 * 
 * Revisions:
 *      1.0.1: (Derrick Hunt)
 *          - Made the class much more abstract to avoid doing more work in child classes
 *      1.0.2: (Peter O'Neal / Derrick Hunt)
 *          - Added ship and movement
 *      1.3.3: (Derrick Hunt)
 *          - More abstract! Also added UpdateBackground, DrawBackground, UpdateHUD and DrawHUD methods in order to handle the background movement
 *      1.4.3: (Peter O'Neal)
 *          - Added collision detection method for the enemies
 *      1.5.3: (Freddy Garcia)
 *          - Removed UpdateHUD from level class and moved it into the HealthBar class
 *      1.6.3: (Peter O'Neal)
 *          - Added score and made enemies spawn after 5 seconds
 *      1.6.4: (Peter O'Neal)
 *          - Added enemy AI
 *      1.6.5: (Peter O'Neal)    
 *          - Added Kamizake ships and collision detection
 *      1.6.6:(Peter O'Neal)
 *          - Fixed how the kamikazes spawn and move
 *      1.6.7:(Peter O'Neal)
 *          - Made nemeies shoot and also tweaked the Kamikaze movement
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Audio;
using Microsoft.Xna.Framework.Content;
using Microsoft.Xna.Framework.GamerServices;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Microsoft.Xna.Framework.Media;

namespace Harvester
{
    /// <summary>
    /// Abstract class for all the levels. Basic level structure is created here!
    /// </summary>
    public abstract class Level : Microsoft.Xna.Framework.DrawableGameComponent
    {
        #region Attributes
        protected GraphicsDeviceManager g;
        // List of the ships currently on the screen
        protected List<Ship> shipList;
        // List of the bullets currently on the screen
        protected List<Bullet> bulletList = new List<Bullet>(); 

        // Array of the background images to scroll
        protected Background[] backgrounds;
        protected Texture2D background1;
        protected Texture2D background2;
        protected Texture2D background3;
        protected Texture2D background4;
        //player object and texture
        protected PlayerShip player;
        protected Texture2D playerShip;
        protected Texture2D pBulletTexture;
        //enemies and bullet
        protected EnemyFighter enemy1;
        protected EnemyFighter enemy2;
        protected EnemyFighter enemy3;
        protected List<Enemy> enemies = new List<Enemy>();
        protected Texture2D enemyShip;
        protected Texture2D enemyBullet;
        protected Texture2D kamikaze;
        protected List<Enemy> kamikazes = new List<Enemy>();
        protected double timeElapsed = 10;
        protected double kamikazeTime = 15;
        Random rand = new Random();
        //spritebatch
        protected SpriteBatch spriteBatch;
        // Sprite fonts used for HUD
        protected SpriteFont font1;
        //HUD components
        protected HealthBar healthBar;
        protected Texture2D healthBarTexture;
        protected Texture2D healthBarOutlineTexture;
        protected Texture2D powerUpOutline;
        protected List<Texture2D> powerUp;
        protected int score;
        //Put power up icons here
        //Explosion stuff
        private List<Explosion> explosions;
        private Texture2D explosion;
        int framesElapsed = 0;
        #endregion

        #region Properties

        public HealthBar HealthBar
        {
            get { return healthBar; }
            set { healthBar = value; }
        }
        /// <summary>
        /// Gets and sets the Player object
        /// </summary>
        public PlayerShip Player
        {
            get { return player; }
            set { player = value; }
        }

        /// <summary>
        /// The list of enemies in the game
        /// </summary>
        public List<Enemy> Enemies
        {
            get { return enemies; }
            set { enemies = value; }
        }

        /// <summary>
        /// The score of the player
        /// </summary>
        public int Score
        {
            get { return score; }
            set { score = value; }
        }

        #endregion

        #region Constructor
        /// <summary>
        /// Creates a new level in the game
        /// </summary>
        /// <param name="theGame"></param>
        public Level(Game theGame,SpriteBatch spriteBatch)
            :base(theGame)
        {
            this.spriteBatch = spriteBatch;
            backgrounds = new Background[4];
        }
        #endregion

        #region Methods
        /// <summary>
        /// Initializes all necessary values to their defaults before the level begins
        /// to run.
        /// </summary>
        public override void Initialize()
        {   
            base.Initialize();
            //no extra code needed
        }

        /// <summary>
        /// Loads all the content for this level
        /// </summary>
        protected override void LoadContent()
        {
            //load ship images and object
            playerShip = AssetManager.Instance.FindTexture("phoenix");
            enemyShip = AssetManager.Instance.FindTexture("enemy_fighter");
            kamikaze = AssetManager.Instance.FindTexture("kamikaze");
            //Images for bullets
            pBulletTexture = AssetManager.Instance.FindTexture("phoenix_bullet");
            enemyBullet = AssetManager.Instance.FindTexture("enemy_bullet");
            //player object to give ship coordinates,  health etc
            player = new PlayerShip(new Rectangle(GraphicsDevice.Viewport.Width / 2, GraphicsDevice.Viewport.Height - 90, 50, 50), playerShip, 5, 100, 0, pBulletTexture, ShipType.Player);
            enemy1 = new EnemyFighter(new Rectangle(GraphicsDevice.Viewport.Width / 3, GraphicsDevice.Viewport.Height - 600, 50, 50), enemyShip, 5, 100, 0, enemyBullet, ShipType.EnemyFighter,7);
            enemy2 = new EnemyFighter(new Rectangle(GraphicsDevice.Viewport.Width / 2, GraphicsDevice.Viewport.Height - 600, 50, 50), enemyShip, 5, 100, 0, enemyBullet, ShipType.EnemyFighter,9);
            enemy3 = new EnemyFighter(new Rectangle(GraphicsDevice.Viewport.Width / 2 + 165, GraphicsDevice.Viewport.Height - 600, 50, 50), enemyShip, 5, 100, 0, enemyBullet, ShipType.EnemyFighter,13);
            enemies.Add(enemy1);
            enemies.Add(enemy2);
            enemies.Add(enemy3);
            //load HUD elements
            font1 = Game.Content.Load<SpriteFont>(@"Fonts\InGameFont");
            healthBarTexture = AssetManager.Instance.FindTexture("health_bar");
            healthBar = new HealthBar(new Rectangle(10, 40, (int) player.CurrentHealth, 20), healthBarTexture, (int) player.CurrentHealth);
            healthBarOutlineTexture = AssetManager.Instance.FindTexture("health_bar_border");
            powerUpOutline = AssetManager.Instance.FindTexture("power_up_border");
            //load power up icons here

            //load explosion texture
            explosions = new List<Explosion>();
            explosion = AssetManager.Instance.FindTexture("explosion_1");
        }

        /// <summary>
        /// Updates the game, making sure the background remains scrolling and the player and enemies are 
        /// responding / acting correctly.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values</param>
        public override void Update(GameTime gameTime)
        {
            //update backgrounds
            UpdateBackground(backgrounds);

            //update the player bullets
            player.UpdatePlayerBullets();

            //update the HUD
            healthBar.UpdateHUD();

            //checks to see if bullets are hitting enemies
            CheckCollisions();

            //use these for animating explosion
            framesElapsed += 1;
            if (framesElapsed == 10)
            {
                framesElapsed = 0;

                for (int i = 0; i < explosions.Count; i++)
                {
                    explosions[i].Frame++;

                    if (explosions[i].Frame > 5)
                    {
                        explosions.Remove(explosions[i]);
                    }
                }
                
            }

            //uses to spawn enemies
            timeElapsed -= (gameTime.ElapsedGameTime.TotalSeconds);
            kamikazeTime -= (gameTime.ElapsedGameTime.TotalSeconds);
            //used as a timer for when enemies shoot
            for (int i = 0; i < enemies.Count; i++)
            {
                enemies[i].ShotTimer -= (gameTime.ElapsedGameTime.TotalSeconds);
                if (enemies[i].ShotTimer <= 0)
                {
                    enemies[i].Fire();
                    enemies[i].ShotTimer = rand.Next(1, 15);
                }
                enemies[i].UpdateEnemyBullets();
            }
            

            //makes enemies go back and forth on the screen
            MoveEnemies();

        }
        
        /// <summary>
        /// Draws the background and enemies to the screen, 
        /// in addition to any bullets or abilities that are currently being used
        /// </summary>
        public virtual void Draw(GameTime gameTime, SpriteBatch spriteBatch)
        {
            //draw the backgrounds
            DrawBackground(gameTime, spriteBatch);

            //draw the player and bullets
            player.Draw(spriteBatch);
            
            for (int i = 0; i < player.Bullets.Count; i++)
            {
                player.Bullets[i].Draw(spriteBatch);
            }
            //draws the enemy bullets
            for(int i = 0; i < enemies.Count; i++)
            {
                for (int j = 0; j < enemies[i].EBullets.Count; j++)
                {
                    enemies[i].EBullets[j].Draw(spriteBatch);
                }
            }
            //make shit blow up
            for (int i = 0; i < Enemies.Count; i++)
            {
                if (enemies[i].IsActive == false)
                {
                    //add a new explosion at enemy pos
                    explosions.Add(new Explosion(enemies[i].ObjectPosition, explosion));
                    //spriteBatch.Draw(explosion, new Vector2(enemies[i].ObjectXPos-25, enemies[i].ObjectYPos-25), new Rectangle(90 * frame, 0, 90, 90), Color.White);
                    //remove enemy
                    enemies.Remove(enemies[i]);
                }
            }
            for (int i = 0; i < explosions.Count; i++)
            {
                explosions[i].Draw(spriteBatch);
            }

            //draw the HUD
            DrawHUD(spriteBatch);

            //spawns the fighter enemies
            if (timeElapsed <= 0)
            {
                enemies.Add(new EnemyFighter(new Rectangle((rand.Next(50, GraphicsDevice.Viewport.Width) - 50), rand.Next(50, GraphicsDevice.Viewport.Height / 2), 50, 50), enemyShip, 10, 100, 0, enemyBullet, ShipType.EnemyFighter,10));
                timeElapsed = 5;
            }
            //spawns the kamikaze fighters
            if (kamikazeTime <= 0)
            {
                enemies.Add(new EnemyFighter(new Rectangle(rand.Next(50, GraphicsDevice.Viewport.Width), -55, 50, 50), kamikaze, 2, 50, 0, enemyBullet, ShipType.Kamikaze,0));
                kamikazeTime = 15;
            }
            //draw enemies
            for (int i = 0; i < Enemies.Count; i++)
            {
                if (enemies[i].Type == ShipType.EnemyFighter && enemies[i].IsActive == true)
                {
                    Enemies[i].Draw(spriteBatch);

                }
                if (enemies[i].Type == ShipType.Kamikaze && enemies[i].IsActive == true)
                {
                    enemies[i].Draw(spriteBatch);
                }
            }
        }

        //Moves enemies to the right and left until they hit the screen edge
        private void MoveEnemies()
        {
            for (int i = 0; i < enemies.Count; i++)
            {
                if (enemies[i].IsActive)
                {
                    if (enemies[i].Type == ShipType.EnemyFighter)
                    {

                        if (enemies[i].HitRight == false)
                        {
                            if (enemies[i].ObjectXPos < GraphicsDevice.Viewport.Width - 50)
                            {
                                enemies[i].ObjectXPos += 1;
                            }
                            if (enemies[i].ObjectXPos == GraphicsDevice.Viewport.Width - 50)
                            {
                                enemies[i].HitRight = true;
                            }
                        }
                        else if (enemies[i].HitRight == true)
                        {
                            if (enemies[i].ObjectXPos > 0)
                            {
                                enemies[i].ObjectXPos -= 1;
                            }
                            if (enemies[i].ObjectXPos == 0)
                            {
                                enemies[i].HitRight = false;
                            }
                        }
                    }
                    //kamikaze ships fly at you
                    else if (enemies[i].Type == ShipType.Kamikaze)
                    {
                        if (enemies[i].ObjectYPos < 150)
                        {
                            enemies[i].ObjectYPos += 2;
                        }

                        if (enemies[i].HitRight == false && enemies[i].LockOn == false)
                        {
                            if (enemies[i].ObjectXPos < GraphicsDevice.Viewport.Width - 52)
                            {
                                enemies[i].ObjectXPos += 2;
                            }
                            if (enemies[i].ObjectXPos >= GraphicsDevice.Viewport.Width - 52)
                            {
                                enemies[i].HitRight = true;
                            }
                        }

                        else if (enemies[i].HitRight == true && enemies[i].LockOn == false)
                        {
                            if (enemies[i].ObjectXPos > 0)
                            {
                                enemies[i].ObjectXPos -= 2;
                            }
                            if (enemies[i].ObjectXPos <= 0)
                            {
                                enemies[i].HitRight = false;
                            }
                        }
                        //the actual kamikaze code that makes the ship fly down fast
                        if (enemies[i].ObjectXPos > player.ObjectXPos && enemies[i].ObjectXPos < player.ObjectXPos + 6)
                        {
                            enemies[i].LockOn = true;
                        }

                        if (enemies[i].LockOn == true)
                        {
                            enemies[i].Color = Color.Red;
                            enemies[i].ObjectYPos += 8;

                            if (enemies[i].ObjectYPos > GraphicsDevice.Viewport.Height)
                            {
                                enemies[i].IsActive = false;
                            }
                        }
                    }
                }
            }
        }

        #endregion

        #region Private/Helper Methods
        /// <summary>
        /// Updates the positions of the background textures.
        /// Called in update
        /// </summary>
        /// <param name="backgrounds">the list of backgrounds to move</param>
        private void UpdateBackground(Background[] backgrounds)
        {
            //scroll backgrounds down vertically
            for (int i = 0; i < backgrounds.Length; i++)
            {
                backgrounds[i].ObjectYPos++;
                //reset images for continuous scrolling
                if (backgrounds[i].ObjectYPos >= GraphicsDevice.Viewport.Height * (backgrounds.Length - 1))
                {
                    backgrounds[i].ObjectYPos = -GraphicsDevice.Viewport.Height;
                }
            }
        }

        /// <summary>
        /// Draws the scrolling background in the level
        /// </summary>
        /// <param name="gameTime"></param>
        /// <param name="spriteBatch"></param>
        private void DrawBackground(GameTime gameTime, SpriteBatch spriteBatch)
        {
            for (int i = 0; i < backgrounds.Length; i++)
                backgrounds[i].Draw(spriteBatch);
        }

        /// <summary>
        /// Draws the HUD to the screen.
        /// Called in Draw.
        /// </summary>
        /// <param name="spriteBatch">the spriteBatch doing the drawing</param>
        private void DrawHUD(SpriteBatch spriteBatch)
        {
            //Draw current health
            spriteBatch.DrawString(font1, "HEALTH", new Vector2(10, 10), Color.White);
            healthBar.Draw(spriteBatch);
            spriteBatch.Draw(healthBarOutlineTexture, new Rectangle(healthBar.ObjectXPos, healthBar.ObjectYPos, 100, healthBar.ObjectHeight), Color.White);
            //Draw current score
            spriteBatch.DrawString(font1, "SCORE", new Vector2(10, 100), Color.White);
            spriteBatch.DrawString(font1, "" + score, new Vector2(10, 120), Color.White);
            //Draw current power
            spriteBatch.DrawString(font1, "POWER", new Vector2(10, 380), Color.White);
            spriteBatch.Draw(powerUpOutline, new Rectangle(10, 420, 50, 50), Color.White);
        }

        /// <summary>
        /// Checks for collisions of all of the objects in the ship
        /// </summary>
        private void CheckCollisions()
        {
            //checks bullets against normal enemies
            for (int i = 0; i < Enemies.Count; i++)
            {
                for (int j = 0; j < Player.Bullets.Count; j++)
                {
                    // If the bullets of the player intersect with any enemies
                    // The enemies take a hit
                    if (Player.Bullets[j].ObjectPosition.Intersects(Enemies[i].ObjectPosition))
                    {
                        enemies[i].TakeHit(25);
                        Player.Bullets.Remove(Player.Bullets[j]);
                        //Adds score when enemies die
                        if (enemies[i].IsActive == false)
                        {
                            score += 100;
                        }
                    }
                }
                //checks collisions with enemy bullets and player
                for (int k = 0; k < enemies[i].EBullets.Count; k++)
                {
                    if(enemies[i].EBullets[k].ObjectPosition.Intersects(player.ObjectPosition))
                    {
                        player.CurrentHealth -= 10;
                        enemies[i].EBullets.Remove(enemies[i].EBullets[k]);                     
                    }
                }
                //checks collisions betwen enemy ships and player ships
                if (enemies[i].ObjectPosition.Intersects(player.ObjectPosition))
                {
                    enemies[i].IsActive = false;
                    player.CurrentHealth = 0;
                }
            }
        }
        #endregion
    }      
}
