/*
 * public abstract class HealthBar : MovableGameObject
 * @author Derrick Hunt
 * 
 * Version:
 *      $1.3.4$
 * 
 * Revisions:
 *      1.3.4: (Freddy Garcia)
 *          - Changed health into a double (cause doubles are cooler)
 *          - Renamed texture parameter in Draw to spritebatch
 *          - Changed health into currentHealth. Made a maxHealth variable in order
 *            to differentiate between the current health of the player and the maximum health that the player can have
 *          - Draw method now checks for percentage of health remaining rather than specific values.
 *          - Created two new methods: AddHealth(double num) and RemoveHealth(double num)
 *              These methods will handle changing the value of the health bar according to the health of the player
 *          - Moved UpdateHUD method from Level class to HealthBar class in order to manage the change in health bar in this class
 * 
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;

namespace Harvester
{
    /// <summary>
    /// The health bar that will be displayed on the top-left corner of the screen.
    /// </summary>
    public class HealthBar : GameObject
    {
        // The current health of the player
        private double currentHealth;
        // The total health of the player
        private double maxHealth;

        #region Properties
        /// <summary>
        /// Current health of the player
        /// </summary>
        public double CurrentHealth
        {
            get { return currentHealth; }
            set 
            { 
                currentHealth = value;

                // makes sure the curent health does not go below 0
                if (currentHealth < 0)
                    currentHealth = 0;

                // makes sure the current health does not go above the max health
                if (currentHealth > maxHealth)
                    currentHealth = maxHealth;
            }
        }

        /// <summary>
        /// Maximum health of the player
        /// </summary>
        public double MaxHealth
        {
            get { return maxHealth; }
            set { maxHealth = value; }
        }
        #endregion

        /// <summary>
        /// Creates a health bar with a specified position / size, 
        /// texture, and the amount of health that the player has.
        /// </summary>
        /// <param name="rect">The position and size of the health bar</param>
        /// <param name="texture">The texture of the health bar</param>
        /// <param name="maxHealth">The maximum health value of the player</param>
        public HealthBar(Rectangle rect, Texture2D texture, double maxHealth) 
            : base(rect, texture)
        {
            this.maxHealth = maxHealth;
            currentHealth = maxHealth;
        }

        /// <summary>
        /// This is called when the game should draw itself.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        public override void Draw(SpriteBatch spriteBatch)
        {
            // Green bar when health >= 75%
            if (CurrentHealth / MaxHealth > .75)
            {
                spriteBatch.Draw(this.ObjectTexture, this.ObjectPosition, Color.Green);
            }
            // Yellow bar when health >= 50% && < 75%
            else if (CurrentHealth / MaxHealth >= .50 && CurrentHealth / MaxHealth < .75)
            {
                spriteBatch.Draw(this.ObjectTexture, this.ObjectPosition, Color.Yellow);
            }
            // Orange bar when health >= 25% && < 50%
            else if (CurrentHealth / MaxHealth >= .25 && CurrentHealth / MaxHealth < .50)
            {
                spriteBatch.Draw(this.ObjectTexture, this.ObjectPosition, Color.Orange);
            }
            // Red bar when health >= 0% && < 25%
            else
            {
                spriteBatch.Draw(this.ObjectTexture, this.ObjectPosition, Color.Red);
            }
        }

        /// <summary>
        /// Adds health to the players current health
        /// </summary>
        /// <param name="value">The amount of health to add</param>
        public void AddHealth(double value)
        {
            CurrentHealth += value;
        }

        /// <summary>
        /// Removes health from the players current health
        /// </summary>
        /// <param name="value">The amount of health to remove</param>
        public void RemoveHealth(double value)
        {
            CurrentHealth -= value;
        }

        /// <summary>
        /// Updates the health bar of the player based on the current health percentage of the player
        /// </summary>
        public void UpdateHUD()
        {
            //update the health bar
            CurrentHealth -= .2;//change to reflect player health

            // updates the width of the health bar based on the percentage of health remaining (rather than static numbers)
            this.ObjectWidth = (int) ((CurrentHealth / MaxHealth) * 100);
            //update the score

            //update the power up
        }
    }
}
